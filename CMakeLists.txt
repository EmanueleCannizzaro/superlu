# Minimum required version of CMake
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
IF(COMMAND CMAKE_POLICY)
  CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND CMAKE_POLICY)

# Set CMake project name
PROJECT(SUPERLU)

# Identify CMake directory
set(SUPERLU_CMAKE_DIR "${SUPERLU_SOURCE_DIR}/CMake")
if(SUPERLU_IS_SUBBUILD)
  set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${SUPERLU_CMAKE_DIR}")
else(SUPERLU_IS_SUBBUILD)
  set(CMAKE_MODULE_PATH "${SUPERLU_CMAKE_DIR};${CMAKE_MODULE_PATH}")
endif(SUPERLU_IS_SUBBUILD)

# Initialize options if not manually set
if("${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "")
  set(SUPERLU_USE_BUNDLED_BLAS "AUTO" CACHE STRING "Tell SuperLU whether or not to use local cblas")
else("${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "")
  string(TOUPPER "${SUPERLU_USE_BUNDLED_BLAS}" SUPERLU_USE_BUNDLED_BLAS)
  if(NOT "${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "ON" AND NOT "${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "OFF")
    set(SUPERLU_USE_BUNDLED_BLAS "AUTO" CACHE STRING "Tell SuperLU whether or not to use local cblas")
  endif(NOT "${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "ON" AND NOT "${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "OFF")
endif("${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "")
set_property(CACHE SUPERLU_USE_BUNDLED_BLAS PROPERTY STRINGS AUTO ON OFF)

if("${SUPERLU_ENABLE_TESTING}" STREQUAL "")
  set(SUPERLU_ENABLE_TESTING ON CACHE BOOL "Enable SuperLU testing")
else("${SUPERLU_ENABLE_TESTING}" STREQUAL "")
  set(SUPERLU_ENABLE_TESTING ${SUPERLU_ENABLE_TESTING} CACHE BOOL "SuperLU testing")
endif("${SUPERLU_ENABLE_TESTING}" STREQUAL "")
if("${SUPERLU_BUILD_EXAMPLES}" STREQUAL "")
  set(SUPERLU_BUILD_EXAMPLES ON CACHE BOOL "Build SuperLU examples")
else("${SUPERLU_BUILD_EXAMPLES}" STREQUAL "")
  set(SUPERLU_BUILD_EXAMPLES ${SUPERLU_BUILD_EXAMPLES} CACHE BOOL "SuperLU examples")
endif("${SUPERLU_BUILD_EXAMPLES}" STREQUAL "")

# Figure out what we're doing about BLAS
if(NOT "${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "ON")
  if("${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "OFF")
    find_package(BLAS REQUIRED)
  else("${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "OFF")
    find_package(BLAS)
  endif("${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "OFF")
endif(NOT "${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "ON")

if("${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "ON" OR NOT BLAS_LIBRARIES)
  add_subdirectory(cblas)
  set(BLAS_LIBRARIES superlu_cblas)
  if(NOT BLAS_FIND_QUIETLY)
    message("-- Using SuperLU's local copy of CBLAS.")
    set(BLAS_FIND_QUIETLY 1 CACHE BOOL "Suppress BLAS messages")
    mark_as_advanced(BLAS_FIND_QUIETLY)
  endif(NOT BLAS_FIND_QUIETLY)
else("${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "ON" OR NOT BLAS_LIBRARIES)
  add_definitions(-DUSE_VENDOR_BLAS)
endif("${SUPERLU_USE_BUNDLED_BLAS}" STREQUAL "ON" OR NOT BLAS_LIBRARIES)

if(NOT M_LIBRARY)
  include(CheckLibraryExists)
  include(ResolveCompilerPaths)
  CHECK_LIBRARY_EXISTS(m cos "" HAVE_M_LIBRARY)
  if(HAVE_M_LIBRARY)
    RESOLVE_LIBRARIES(M_LIBRARY "-lm")
  endif(HAVE_M_LIBRARY)
endif(NOT M_LIBRARY)

add_subdirectory(src)

if(SUPERLU_ENABLE_TESTING)
  add_subdirectory(testing)
endif(SUPERLU_ENABLE_TESTING)

if(SUPERLU_BUILD_EXAMPLES)
  add_subdirectory(examples)
endif(SUPERLU_BUILD_EXAMPLES)

# Local Variables:
# tab-width: 8
# mode: cmake
# indent-tabs-mode: t
# End:
# ex: shiftwidth=2 tabstop=8
